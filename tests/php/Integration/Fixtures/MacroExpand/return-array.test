--PHEL--
(def x :macro (fn [x] (php/array 1 2 (php/array 3 4))))

(def y (x 1))
--PHP--
\Phel::addDefinition(
  "user",
  "x",
  new class() extends \Phel\Lang\AbstractFn {
    public const BOUND_TO = "user\\x";

    public function __invoke($x) {
      return array(1, 2, array(3, 4));
    }
  },
  \Phel\Lang\TypeFactory::getInstance()->persistentMapFromKVs(
    \Phel\Lang\Keyword::create("macro"), true,
    \Phel\Lang\Keyword::create("start-location"), \Phel\Lang\TypeFactory::getInstance()->persistentMapFromKVs(
      \Phel\Lang\Keyword::create("file"), "MacroExpand/return-array.test",
      \Phel\Lang\Keyword::create("line"), 1,
      \Phel\Lang\Keyword::create("column"), 0
    ),
    \Phel\Lang\Keyword::create("end-location"), \Phel\Lang\TypeFactory::getInstance()->persistentMapFromKVs(
      \Phel\Lang\Keyword::create("file"), "MacroExpand/return-array.test",
      \Phel\Lang\Keyword::create("line"), 1,
      \Phel\Lang\Keyword::create("column"), 55
    ),
    "min-arity", 1
  )
);
\Phel::addDefinition(
  "user",
  "y",
  [0 => 1, 1 => 2, 2 => [0 => 3, 1 => 4]],
  \Phel\Lang\TypeFactory::getInstance()->persistentMapFromKVs(
    \Phel\Lang\Keyword::create("start-location"), \Phel\Lang\TypeFactory::getInstance()->persistentMapFromKVs(
      \Phel\Lang\Keyword::create("file"), "MacroExpand/return-array.test",
      \Phel\Lang\Keyword::create("line"), 3,
      \Phel\Lang\Keyword::create("column"), 0
    ),
    \Phel\Lang\Keyword::create("end-location"), \Phel\Lang\TypeFactory::getInstance()->persistentMapFromKVs(
      \Phel\Lang\Keyword::create("file"), "MacroExpand/return-array.test",
      \Phel\Lang\Keyword::create("line"), 3,
      \Phel\Lang\Keyword::create("column"), 13
    )
  )
);

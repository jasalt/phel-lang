--PHEL--
(let [matches (php/array)
      [a b] [1 2]
      f (fn [matches] matches)])
--PHP--
$matches_6 = array();
$__phel_1_7 = \Phel\Lang\TypeFactory::getInstance()->persistentVectorFromArray([1, 2]);
$__phel_2_8 = (\Phel::getDefinition("phel\\core", "first"))($__phel_1_7);
$__phel_3_9 = (\Phel::getDefinition("phel\\core", "next"))($__phel_1_7);
$a_10 = $__phel_2_8;
$__phel_4_11 = (\Phel::getDefinition("phel\\core", "first"))($__phel_3_9);
$__phel_5_12 = (\Phel::getDefinition("phel\\core", "next"))($__phel_3_9);
$b_13 = $__phel_4_11;
$f_14 = new class($__phel_1_7, $__phel_2_8, $__phel_3_9, $a_10, $__phel_4_11, $__phel_5_12, $b_13) extends \Phel\Lang\AbstractFn {
  public const BOUND_TO = ".f";
  private $__phel_1_7;
  private $__phel_2_8;
  private $__phel_3_9;
  private $a_10;
  private $__phel_4_11;
  private $__phel_5_12;
  private $b_13;

  public function __construct($__phel_1_7, $__phel_2_8, $__phel_3_9, $a_10, $__phel_4_11, $__phel_5_12, $b_13) {
    $this->__phel_1_7 = $__phel_1_7;
    $this->__phel_2_8 = $__phel_2_8;
    $this->__phel_3_9 = $__phel_3_9;
    $this->a_10 = $a_10;
    $this->__phel_4_11 = $__phel_4_11;
    $this->__phel_5_12 = $__phel_5_12;
    $this->b_13 = $b_13;
  }

  public function __invoke($matches) {
    $__phel_1_7 = $this->__phel_1_7;
    $__phel_2_8 = $this->__phel_2_8;
    $__phel_3_9 = $this->__phel_3_9;
    $a_10 = $this->a_10;
    $__phel_4_11 = $this->__phel_4_11;
    $__phel_5_12 = $this->__phel_5_12;
    $b_13 = $this->b_13;
    return $matches;
  }
};
